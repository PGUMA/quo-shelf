/*
 * This file is generated by jOOQ.
 */
package lab.pguma.quoshelf.infrastructure.jooq.models.tables.records;


import lab.pguma.quoshelf.infrastructure.jooq.models.tables.Books;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BooksRecord extends UpdatableRecordImpl<BooksRecord> implements Record3<Integer, String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>BOOKS.BOOK_ID</code>.
     */
    public void setBookId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>BOOKS.BOOK_ID</code>.
     */
    public Integer getBookId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>BOOKS.BOOK_TITLE</code>.
     */
    public void setBookTitle(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>BOOKS.BOOK_TITLE</code>.
     */
    public String getBookTitle() {
        return (String) get(1);
    }

    /**
     * Setter for <code>BOOKS.AUTHOR_ID</code>.
     */
    public void setAuthorId(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>BOOKS.AUTHOR_ID</code>.
     */
    public Integer getAuthorId() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Books.BOOKS.BOOK_ID;
    }

    @Override
    public Field<String> field2() {
        return Books.BOOKS.BOOK_TITLE;
    }

    @Override
    public Field<Integer> field3() {
        return Books.BOOKS.AUTHOR_ID;
    }

    @Override
    public Integer component1() {
        return getBookId();
    }

    @Override
    public String component2() {
        return getBookTitle();
    }

    @Override
    public Integer component3() {
        return getAuthorId();
    }

    @Override
    public Integer value1() {
        return getBookId();
    }

    @Override
    public String value2() {
        return getBookTitle();
    }

    @Override
    public Integer value3() {
        return getAuthorId();
    }

    @Override
    public BooksRecord value1(Integer value) {
        setBookId(value);
        return this;
    }

    @Override
    public BooksRecord value2(String value) {
        setBookTitle(value);
        return this;
    }

    @Override
    public BooksRecord value3(Integer value) {
        setAuthorId(value);
        return this;
    }

    @Override
    public BooksRecord values(Integer value1, String value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BooksRecord
     */
    public BooksRecord() {
        super(Books.BOOKS);
    }

    /**
     * Create a detached, initialised BooksRecord
     */
    public BooksRecord(Integer bookId, String bookTitle, Integer authorId) {
        super(Books.BOOKS);

        setBookId(bookId);
        setBookTitle(bookTitle);
        setAuthorId(authorId);
    }
}
