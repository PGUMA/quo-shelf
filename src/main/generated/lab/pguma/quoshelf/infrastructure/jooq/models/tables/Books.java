/*
 * This file is generated by jOOQ.
 */
package lab.pguma.quoshelf.infrastructure.jooq.models.tables;


import java.util.Arrays;
import java.util.List;

import lab.pguma.quoshelf.infrastructure.jooq.models.DefaultSchema;
import lab.pguma.quoshelf.infrastructure.jooq.models.Keys;
import lab.pguma.quoshelf.infrastructure.jooq.models.tables.records.BooksRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Books extends TableImpl<BooksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>BOOKS</code>
     */
    public static final Books BOOKS = new Books();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BooksRecord> getRecordType() {
        return BooksRecord.class;
    }

    /**
     * The column <code>BOOKS.BOOK_ID</code>.
     */
    public final TableField<BooksRecord, Integer> BOOK_ID = createField(DSL.name("BOOK_ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>BOOKS.BOOK_TITLE</code>.
     */
    public final TableField<BooksRecord, String> BOOK_TITLE = createField(DSL.name("BOOK_TITLE"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>BOOKS.AUTHOR_ID</code>.
     */
    public final TableField<BooksRecord, Integer> AUTHOR_ID = createField(DSL.name("AUTHOR_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    private Books(Name alias, Table<BooksRecord> aliased) {
        this(alias, aliased, null);
    }

    private Books(Name alias, Table<BooksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>BOOKS</code> table reference
     */
    public Books(String alias) {
        this(DSL.name(alias), BOOKS);
    }

    /**
     * Create an aliased <code>BOOKS</code> table reference
     */
    public Books(Name alias) {
        this(alias, BOOKS);
    }

    /**
     * Create a <code>BOOKS</code> table reference
     */
    public Books() {
        this(DSL.name("BOOKS"), null);
    }

    public <O extends Record> Books(Table<O> child, ForeignKey<O, BooksRecord> key) {
        super(child, key, BOOKS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<BooksRecord, Integer> getIdentity() {
        return (Identity<BooksRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<BooksRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_3;
    }

    @Override
    public List<UniqueKey<BooksRecord>> getKeys() {
        return Arrays.<UniqueKey<BooksRecord>>asList(Keys.CONSTRAINT_3);
    }

    @Override
    public List<ForeignKey<BooksRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BooksRecord, ?>>asList(Keys.BOOK_WRITING_AUTHOR);
    }

    private transient Authors _authors;

    public Authors authors() {
        if (_authors == null)
            _authors = new Authors(this, Keys.BOOK_WRITING_AUTHOR);

        return _authors;
    }

    @Override
    public Books as(String alias) {
        return new Books(DSL.name(alias), this);
    }

    @Override
    public Books as(Name alias) {
        return new Books(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Books rename(String name) {
        return new Books(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Books rename(Name name) {
        return new Books(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
